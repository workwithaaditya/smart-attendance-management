generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Subject {
  id                Int                @id @default(autoincrement())
  name              String
  color             String?            @default("#3B82F6")
  totalClasses      Int                @default(0)
  attendedClasses   Int                @default(0)
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  timetableSlots    TimetableSlot[]

  @@unique([userId, name])
  @@map("subjects")
}

model TimetableSlot {
  id          Int      @id @default(autoincrement())
  dayOfWeek   String
  periodStart Int
  periodEnd   Int
  merged      Boolean  @default(false)
  subjectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, dayOfWeek, periodStart, periodEnd])
  @@map("timetable_slots")
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  subjectId Int
  date      DateTime
  status    String
  count     Int      @default(1)
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, date])
  @@map("attendance_records")
}
