generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
  templates     Template[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Subject {
  id                Int                @id @default(autoincrement())
  name              String
  color             String?            @default("#3B82F6")
  totalClasses      Int                @default(0)
  attendedClasses   Int                @default(0)
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  timetableSlots    TimetableSlot[]

  @@unique([userId, name])
  @@map("subjects")
}

model TimetableSlot {
  id          Int      @id @default(autoincrement())
  dayOfWeek   String
  periodStart Int
  periodEnd   Int
  merged      Boolean  @default(false)
  subjectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, dayOfWeek, periodStart, periodEnd])
  @@map("timetable_slots")
}

model AttendanceRecord {
  id          Int      @id @default(autoincrement())
  subjectId   Int
  date        DateTime
  periodStart Int?     // Which period started (e.g., 1, 7)
  periodEnd   Int?     // Which period ended (e.g., 2, 8)
  status      String   // "present", "absent", "holiday"
  count       Int      @default(1)
  createdAt   DateTime @default(now())
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, date, periodStart, periodEnd])
  @@map("attendance_records")
}

// Template Sharing System
model Template {
  id               Int                @id @default(autoincrement())
  name             String             // e.g., "5th Sem ISE Section A Batch A1"
  description      String?            // Optional description
  semester         String?            // e.g., "5th Sem", "Semester 5"
  section          String?            // e.g., "Section A"
  batch            String?            // e.g., "Batch A1"
  isPublic         Boolean            @default(true)
  importCount      Int                @default(0)
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateSubjects TemplateSubject[]
  templateTimetable TemplateTimetable[]

  @@index([semester, section, batch])
  @@index([userId])
  @@map("templates")
}

model TemplateSubject {
  id                Int                @id @default(autoincrement())
  name              String
  code              String?            // Subject code (e.g., "CS501")
  color             String             @default("#3B82F6")
  templateId        Int
  createdAt         DateTime           @default(now())
  template          Template           @relation(fields: [templateId], references: [id], onDelete: Cascade)
  timetableSlots    TemplateTimetable[]

  @@map("template_subjects")
}

model TemplateTimetable {
  id                Int              @id @default(autoincrement())
  dayOfWeek         String
  periodStart       Int
  periodEnd         Int
  merged            Boolean          @default(false)
  templateSubjectId Int
  templateId        Int
  createdAt         DateTime         @default(now())
  templateSubject   TemplateSubject  @relation(fields: [templateSubjectId], references: [id], onDelete: Cascade)
  template          Template         @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, dayOfWeek, periodStart, periodEnd])
  @@map("template_timetable")
}
